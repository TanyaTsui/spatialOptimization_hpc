yMax <- tail(yCoords, 1) - yCoords[1]
# jitter
pts3 <- spJitter(points = pts2, candi = candi, which.point = 1, cellsize = 0,
x.min = xMin, x.max = xMax,
y.min = yMin, y.max = yMax)
plot(candi[, 2:3], asp = 1, pch = 16, col = "gray")
points(pts2[, 2:3], col = "red", cex = 1)
points(pts3[, 2:3], pch = 19, col = "blue", cex = 1)
# jitter
pts3 <- spJitter(points = pts2, candi = candi, which.point = 1, cellsize = 0,
x.min = xMin, x.max = xMax*0.85,
y.min = yMin, y.max = yMax*0.85)
plot(candi[, 2:3], asp = 1, pch = 16, col = "gray")
points(pts2[, 2:3], col = "red", cex = 1)
points(pts3[, 2:3], pch = 19, col = "blue", cex = 1)
# jitter
pts3 <- spJitter(points = pts2, candi = candi, which.point = 1, cellsize = 0,
x.min = xMin, x.max = xMax*0.8,
y.min = yMin, y.max = yMax*0.8)
plot(candi[, 2:3], asp = 1, pch = 16, col = "gray")
points(pts2[, 2:3], col = "red", cex = 1)
points(pts3[, 2:3], pch = 19, col = "blue", cex = 1)
pt1 <- c(1)
pt1 <- c(5)
pt1
pt1 <- c(5, 6)
pt1
pt1 <- c(5)
candi[pt1, ]
trace(spJitter)
help("trace")
trace(spJitter, edit = T)
# jitter
pts3 <- spJitter(points = pts2, candi = candi, which.point = 1, cellsize = 0,
x.min = xMin, x.max = xMax*0.8,
y.min = yMin, y.max = yMax*0.8)
plot(candi[, 2:3], asp = 1, pch = 16, col = "gray")
points(pts2[, 2:3], col = "red", cex = 1)
points(pts3[, 2:3], pch = 19, col = "blue", cex = 1)
# try on my own data
candi <- read.csv('data/candiHubs_ams.csv')
candi <- as.matrix(candi)
colnames(candi) <- c("id", "x", "y")
candi <- candi[1:10, ]
pts2 <- candi[c(1:9), ]
# calculate params
xCoords <- sort(candi[, 2])
xDists <- sort(diff(xCoords))
xMin <- xDists[1]
xMax <- tail(xCoords, 1) - xCoords[1]
yCoords <- sort(candi[, 3])
yDists <- sort(diff(yCoords))
yMin <- yDists[1]
yCoords <- sort(candi[, 3])
yDists <- sort(diff(yCoords))
yMin <- yDists[1]
yMax <- tail(yCoords, 1) - yCoords[1]
# jitter
pts3 <- spJitter(points = pts2, candi = candi, which.point = 1, cellsize = 0,
x.min = xMin, x.max = xMax,
y.min = yMin, y.max = yMax)
plot(candi[, 2:3], asp = 1, pch = 16, col = "gray")
points(pts2[, 2:3], col = "red", cex = 1)
points(pts3[, 2:3], pch = 19, col = "blue", cex = 1)
# test on optimUSER
schedule <- scheduleSPSANN(initial.temperature = 0.001)
# test on optimUSER
use_condaenv('C:/Users/tpytsui/Miniconda/envs/geo_env')
# test on optimUSER
library(dplyr)
library(reticulate)
use_condaenv('C:/Users/tpytsui/Miniconda/envs/geo_env')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
schedule <- scheduleSPSANN(initial.temperature = 0.001)
res <- optimUSER(
points = 9, fun = costEffectiveness,
schedule = schedule, candi = candi,
plotit = TRUE, track = TRUE
)
candi <- read.csv('data/candiHubs_ams.csv')
candi <- candi[,c("x", "y")]
candi[, 10]
candi[1:10]
View(candi)
candi[10]
candi[, 10]
candi[10, ]
candi[1:10, ]
candi <- candi[1:10, ]
candi <- read.csv('data/candiHubs_ams.csv')
candi <- candi[,c("x", "y")]
candi <- candi[1:10, ]
schedule <- scheduleSPSANN(initial.temperature = 0.001)
res <- optimUSER(
points = 9, fun = costEffectiveness,
schedule = schedule, candi = candi,
plotit = TRUE, track = TRUE
)
res <- optimUSER(
points = 9, fun = costEffectiveness, reverse = FALSE
schedule = schedule, candi = candi,
plotit = TRUE, track = TRUE
)
res <- optimUSER(
points = 9, fun = costEffectiveness, reverse = FALSE,
schedule = schedule, candi = candi,
plotit = TRUE, track = TRUE
)
resPoints <- res$points
View(resPoints)
schedule <- scheduleSPSANN(initial.temperature = 0.001, cellsize = 0)
res <- optimUSER(
points = 9, fun = costEffectiveness, reverse = FALSE,
schedule = schedule, candi = candi,
plotit = TRUE, track = TRUE
)
resPoints <- res$points
candi[, 2]
head(candi)
candi$x
sort(candi$x)
xCoords <- sort(candi$x)
sort(diff(xCoords))
calcParams <- function(candi) {
# calculate params
xCoords <- sort(candi$x)
xDists <- sort(diff(xCoords))
xMin <- xDists[1]
xMax <- tail(xCoords, 1) - xCoords[1]
yCoords <- sort(candi$y)
yDists <- sort(diff(yCoords))
yMin <- yDists[1]
yMax <- tail(yCoords, 1) - yCoords[1]
return(c(xMin, xMax, yMin, yMax))
}
paramsList <- calcParams(candi)
paramsList <- calcParams(candi)
schedule <- scheduleSPSANN(initial.temperature = 0.001, cellsize = 0,
x.max = paramsList[2], y.max = paramsList[4])
S
res <- optimUSER(
points = 9, fun = costEffectiveness, reverse = FALSE,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
resPoints <- res$points
View(resPoints)
trace(spJitter, edit = T)
trace(spJitter, edit = T)
print(resPoints)
sort(resPoints)
sort(resPoints, 'id')
order(resPoints$id)
resPoints[order(resPoints$id), ]
resPoints <- res$points
resPoints <- resPoints[order(resPoints$id), ]
print(resPoints)
trace(spJitter, edit = T)
trace(spJitter, edit = T)
trace(spJitter, edit = T)
library(spsann)
getwd()
library(spsann)
# try on my own data
candi <- read.csv('data/candiHubs_ams.csv')
candi <- candi[,c("x", "y")]
# calculate params
calcParams <- function (candi) {
xCoords <- sort(candi[, 2])
xDists <- sort(diff(xCoords))
xMin <- xDists[1]
xMax <- tail(xDists, 1)
yCoords <- sort(candi[, 3])
yDists <- sort(diff(yCoords))
yMin <- yDists[1]
yMax <- tail(yDists, 1)
return(c(xMin, xMax, yMin, yMax))
}
# jitter
paramsList <- calcParams(candi)
library(spsann)
library(dplyr)
library(reticulate)
# load cost effectiveness script
use_condaenv('C:/Users/tpytsui/Miniconda/envs/geo_env')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
getwd()
library(spsann)
library(dplyr)
library(reticulate)
use_condaenv('C:/Users/tpytsui/Miniconda/envs/geo_env')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
candi <- read.csv('data/candiHubs_ams.csv')
candi <- candi[,c("x", "y")]
calcParams <- function(candi) {
# calculate params
xCoords <- sort(candi$x)
xDists <- sort(diff(xCoords))
xMin <- xDists[1]
xMax <- tail(xCoords, 1) - xCoords[1]
yCoords <- sort(candi$y)
yDists <- sort(diff(yCoords))
yMin <- yDists[1]
yMax <- tail(yCoords, 1) - yCoords[1]
return(c(xMin, xMax, yMin, yMax))
}
paramsList <- calcParams(candi)
schedule <- scheduleSPSANN(initial.temperature = 0.0001, cellsize = 0,
chains = 1, initial.acceptance = 0.1, temperature.decrease = 0.1,
x.max = paramsList[2], y.max = paramsList[4])
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = TRUE,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
res <- optimUSER(
points = 2, fun = costEffectiveness, reverse = TRUE,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
resPoints <- res$points
resPoints <- resPoints[order(resPoints$id), ]
print(resPoints)
resAll
resAll <- read.csv('results/resPoints_spJitterTest_230331.csv')
resAll
resAll <- read.csv('results/resPoints_spJitterTest_230331.csv')
resAll
resAll <- read.csv('results/resPoints_spJitterTest_230331.csv', header = FALSE)
resAll
head(resAll)
resAll <- read.csv('results/resPoints_spJitterTest_230331.csv', header = FALSE,
col.names = c('index', 'hubName', 'x', 'y', 'free', 'nHubs'))
head(resAll)
resAll <- read.csv('results/resPoints_spJitterTest_230331.csv', header = FALSE,
col.names = c('index', 'hubName', 'x', 'y', 'free', 'nHubs'))
resAll <- resAll[,c('hubName', 'x', 'y', 'nHubs')]
head(resAll)
resAll[resAll$nHubs == 25]
resAll[resAll$nHubs == 25, ]
res25 <- resAll[resAll$nHubs == 25, ]
unique(res25$hubName)
for (nHubs in unique(resAll$nHubs)) {
print(paste0('testing for ', nHubs, ' hubs'))
temp <- resAll[resAll$nHubs == nHubs, ]
print(length(unique(temp$hubName)))
}
library(spsann)
library(dplyr)
library(reticulate)
library(spsann)
library(dplyr)
library(reticulate)
# load cost effectiveness script
use_condaenv('C:/Users/tpytsui/Miniconda/envs/geo_env')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
# read data for candidate hubs
candi <- read.csv('data/candiHubs_ams.csv')
candi <- candi[,c("x", "y")]
# define nHubs
nHubs <- 1
# adjust nHubs
if (nHubs < 80) {
print(paste0('calculating results for ', nHubs, ' hubs...'))
nHubs_adjusted = nHubs # no adjustment because nHubs is low
reverse <- FALSE
} else {
print(paste0('calculating results for ', nHubs, ' hubs...'))
print('nHubs > 100, running reverse cost effectiveness calculations')
nHubs_adjusted = 139 - nHubs
reverse <- TRUE
}
# calculate schedule parameters
calcParams <- function(candi) {
xCoords <- sort(candi$x)
xDists <- sort(diff(xCoords))
xMin <- xDists[1]
xMax <- tail(xCoords, 1) - xCoords[1]
yCoords <- sort(candi$y)
yDists <- sort(diff(yCoords))
yMin <- yDists[1]
yMax <- tail(yCoords, 1) - yCoords[1]
return(c(xMin, xMax, yMin, yMax))
}
# run ssaa
paramsList <- calcParams(candi)
schedule <- scheduleSPSANN(initial.temperature = 0.00001, cellsize = 0,
chains = 1, temperature.decrease = 0.1, initial.acceptance = 0.1,
x.max = paramsList[2], y.max = paramsList[4])
res <- optimUSER(
points = nHubs_adjusted, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('hi')
# define nHubs
nHubs <- 2
# adjust nHubs
if (nHubs < 80) {
print(paste0('calculating results for ', nHubs, ' hubs...'))
nHubs_adjusted = nHubs # no adjustment because nHubs is low
reverse <- FALSE
} else {
print(paste0('calculating results for ', nHubs, ' hubs...'))
print('nHubs > 100, running reverse cost effectiveness calculations')
nHubs_adjusted = 139 - nHubs
reverse <- TRUE
}
res <- optimUSER(
points = 2, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('l')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
res <- optimUSER(
points = 2, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 2, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 2, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 2, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 2, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
res <- optimUSER(
points = 2, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
res <- optimUSER(
points = 2, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
source_python('costEffectiveness_v2.py')
costEffectiveness <- function(points, reverse) {
testValue <- calcTotCostEffectiveness_r(points, reverse)
return(testValue)
}
res <- optimUSER(
points = 1, fun = costEffectiveness, reverse = reverse,
schedule = schedule, candi = candi,
plotit = FALSE, track = TRUE
)
print('f')
source('~/Surfdrive/Documents/_PhD/_github/spatialOptimization_hpc/spatialAnnealing_parallel_hpc.R')
# testing results
resAll <- read.csv('results/resPoints_230331_2-3.csv', header = FALSE,
col.names = c('index', 'hubName', 'x', 'y', 'free', 'nHubs'))
# testing results
resAll <- read.csv('results/resPoints_230331_2-3.csv', header = FALSE)
resAll
# testing results
resAll <- read.csv('results/resPoints_230331_2-3.csv', header = FALSE,
col.names = c('index', 'hubName', 'x', 'y', 'nHubs', 'startTime', 'endTime'))
resAll <- resAll[,c('hubName', 'x', 'y', 'nHubs')]
for (nHubs in unique(resAll$nHubs)) {
print(paste0('testing for ', nHubs, ' hubs'))
temp <- resAll[resAll$nHubs == nHubs, ]
print(length(unique(temp$hubName)))
}
